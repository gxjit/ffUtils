# Format: nb_streams, duration, bit_rate, format_name, format_long_name
# Audio: codec_name, codec_type, sample_rate, channels
# Video: codec_name, codec_type, height, r_frame_rate, pix_fmt
# sum: duration
# median: duration, bit_rate,
# mode: codec_name

# Size averages:: Reduction: 52.95%, Input: 292.66 KB, Output: 137.71 KB.
# Size totals:: Reduction: 309.91 KB, Input: 585.32 KB, Output: 275.41 KB.
# Processing averages:: Speed: x2.16, Time: 0:00:04, Length: 0:00:09.
# Processing totals:: Files: 2, Time: 0:00:08, Length: 0:00:19.
# Bitrate averages:: Reduction: 51.35%, Input: 96.09 KB, Output: 46.74 KB.

# Processed 2 file(s) at average speed: x2.17 with 52.95% average size reduction.
# Processed 0:00:19 in 0:00:08 at average processing time: 0:00:04.
# Size Reduction from: 585.32 KB to: 275.41 KB by: 309.91 KB.
# Size averages:: input: 292.66 KB, output: 137.71 KB
# Bitrate averages:: input: 96.09 KB, output: 46.74 KB.



# vdoLengths = [
#     float(x["input"]["meta"]["video"]["duration"])
#     for x in results
#     if x["input"]["meta"]["video"].get("duration")
# ]
# adoLengths = [
#     float(x["input"]["meta"]["audio"]["duration"])
#     for x in results
#     if x["input"]["meta"]["audio"].get("duration")
# ]

# outFileList = getFileList(outDir, selectFormat(), pargs.recursive)
# dbg(fileList, outFileList)
# fileList = [
#     f for f in fileList if (outDir / f.relative_to(dirPath) not in outFileList)
# ]
# if pargs.recursive:
#     if version_info >= (3, 9):
#         fileList = [f for f in fileList if not f.is_relative_to(outDir)]
#     else:
#         fileList = [f for f in fileList if (str(outDir) not in str(f))]

# times = collectAtKey(results, ["timeTaken"])
# inSizes = collectAtKey(results, ["input", "size"])


# class AudioCfg(NamedTuple): # TODO: fix
#     codec: str
#     quality: int
#     # speed: str # = None


# class VideoCfg(NamedTuple):
#     codec: str
#     quality: int
#     speed: str
#     res: int
#     fps: str

# @dataclass
# class AudioCfg:
#     codec: str
#     quality = None
#     speed = None


# @dataclass
# class VideoCfg:
#     codec: str
#     quality = None
#     speed = None
#     res = None
#     fps = None

# VideoCfg = namedtuple(
#     "video", "codec, quality, speed, res, fps", defaults=repeat(None, 5)
# )
# AudioCfg = namedtuple("audio", "codec, quality", defaults=repeat(None, 2))


# from typing import NamedTuple


# def meta(cType=None):
#     basic = ["codec_type", "codec_name", "profile", "duration", "bit_rate"]
#     if cType == "audio":
#         return [*basic, "channels", "sample_rate"]
#     elif cType == "video":
#         return [*basic, "height", "r_frame_rate", "pix_fmt"]
#     else:
#         return basic


# def compMeta(
#     diffFunc,
#     diffParam,
#     fmtIn,
#     fmtOut,
#     audioMetaIn=None,
#     audioMetaOut=None,
#     videoMetaIn=None,
#     videoMetaOut=None,
# ):

#     diff = diffFunc(fmtIn[diffParam], fmtOut[diffParam])

#     diffs = [(diff, "format")] if diff else []

#     adoDur = audioMetaIn and audioMetaIn.get(diffParam)
#     vdoDur = videoMetaIn and videoMetaIn.get(diffParam)

#     if adoDur:
#         diff = diffFunc(adoDur, audioMetaOut[diffParam])
#         if diff:
#             diffs = [*diffs, (diff, "audio")]

#     if vdoDur:
#         diff = diffFunc(vdoDur, videoMetaOut[diffParam])
#         if diff:
#             diffs = [*diffs, (diff, "audio")]

#     if any(diffs):
#         return diffs
#     else:
#         return False


